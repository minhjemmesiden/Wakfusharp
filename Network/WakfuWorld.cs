using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;

namespace WakSharp.Network
{
    public class WakfuWorld
    {
        public int ID { get; set; }
        public string Name { get; set; }
        public string Language { get; set; }
        public int Population { get; set; }
        public string ip = "127.0.0.1";

        public List<Realm.RealmSession> Players = new List<Realm.RealmSession>();

        public void Encode(WakfuServerMessage packet)
        {
            
            var buffer = packet.Writer;
            string name = "0750686165726973";
            string ip = "3132372E302E302E31";

            string shit = "0000000800000008000000"+name+"0000000D000000"+ip
            //string shit = "000000080000000800000007506861657269730000000D0000003132372E302E302E3100000002000015B4000001BB06000000070000000501BB0100000007000000080000000701003202022D31000000430000000600140000000566616C736500D0000000047472756500D10000000431333B3200D20000000000DD0000000D64656661756C743B737465616D01A400000001380000";
            byte[] test = ConvertHexStringToByteArray(shit);
            buffer.WriteBytes(test);
        }

        public static byte[] ConvertHexStringToByteArray(string hexString)
        {
            if (hexString.Length % 2 != 0)
            {
                throw new ArgumentException(String.Format(CultureInfo.InvariantCulture, "The binary key cannot have an odd number of digits: {0}", hexString));
            }

            byte[] HexAsBytes = new byte[hexString.Length / 2];
            for (int index = 0; index < HexAsBytes.Length; index++)
            {
                string byteValue = hexString.Substring(index * 2, 2);
                HexAsBytes[index] = byte.Parse(byteValue, NumberStyles.HexNumber, CultureInfo.InvariantCulture);
            }

            return HexAsBytes;
        }
    }
}
